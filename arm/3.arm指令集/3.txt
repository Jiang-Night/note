B<c> <label> 
格式：
    [4bit]  [4bit]      [24bit]
    cond    1 0 1 0     imm24

例：
    beq ,eq指令是0000 
    0000 1010 0000 0000 0000 0000 0000 0001 = 0xA000001
    https://armconverter.com/ 网站进行hex to arm
    结果为 beq #0xc
    为什么是0xc呢 0xc是怎么来的？
    文档中给出这样一句：imm32 = SignExtend(imm24:’00’, 32);
    imm24:’00’ = 0000 0000 0000 0000 0000 000100 后面的两个00是imm24:’00’ 补上的
    因为不满32位 所以会往前补齐到32位：
    0000 0000 0000 0000 0000 0000 0000 0100 == 0x4
    那0xC是怎么来的呢 
指令流水线：
    1、取地址
    2、译码
    3、执行
                    PC:08       PC:0C       PC:10
    00:xxxx         执行
    04:xxxx         译码        执行
    08:beq #0xc     取地址       译码       执行
    0c:                        取地址      译码
    10:                                    取地址

    10-08 = 08 所以加上得到的04 结果就是0c

第二个例子:
    lt的指令是1011，那么构造一个blt指令是这样的:
    1011 1010 0000 0000 0000 0000 0000 0011
    cond:1011
    imm24:0000 0000 0000 0000 0000 0011
    imm24:’00’-> 0000 0000 0000 0000 0000 001100 -> 0000 0000 0000 0000 0000 0000 0000 1100 = C
    imm32 = SignExtend(imm24:’00’, 32)
    网站转换后：blt #0x14
    0C + 08 = 14
